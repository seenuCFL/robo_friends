{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","state","searchField","searchRobots","requestRobots","isPending","error","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","disp","useDispatch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92697876.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ( { name, email, id} ) =>  {\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 bw2 shadow-5 ma2 grow'>\r\n            <img alt='robo' src={`https://robohash.org/${id}?200x200`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                            />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange} \r\n            />\r\n        </div> \r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => requestRobots(dispatch) // same as dispatch(requestRobots())\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction App(props) {\r\n  const disp = useDispatch();\r\n  const { onRequestRobots } = props;\r\n  useEffect(() => {\r\n    disp(onRequestRobots());\r\n  }, [disp, onRequestRobots])\r\n  const { searchField, onSearchChange, robots, isPending } = props;\r\n  const filteredRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  })\r\n  return isPending ?\r\n    <h1>Loading...</h1> :\r\n\r\n    (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchField: action.payload };\r\n        default:\r\n        return state;\r\n         \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state= initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: action.payload, isPending:false }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, error: action.payload, isPending: false }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}